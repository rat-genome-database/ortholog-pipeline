// create a runnable jar with jar dependencies stored in lib subdirectory
tasks.whenTaskAdded { task ->
    ['startScripts', 'distTar'].each { String skipTaskName ->
        if (task.name.contains(skipTaskName)) {
            task.enabled = false
        }
    }
}
apply plugin: 'java'
apply plugin: 'application'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}
mainClassName = 'edu.mcw.rgd.dataload.OrthologRelationLoadingManager'
String myAppName = 'ortholog-pipeline'

project.archivesBaseName = myAppName

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
    implementation ('org.apache.commons:commons-dbcp2:2.13.0') {
        exclude group: 'commons-logging', module: 'commons-logging'
    }
    implementation 'commons-net:commons-net:3.12.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.24.1'
    implementation ('org.apache.httpcomponents:httpclient:4.5.14') {
        exclude group: 'commons-logging', module: 'commons-logging'
    }
    implementation 'com.oracle.database.jdbc:ojdbc11:23.9.0.25.07'
    implementation 'org.springframework:spring-jdbc:6.2.10'
    implementation 'xom:xom:1.3.9'

    implementation fileTree(dir: 'lib', include: '*.jar')
}

jar {
    manifest {
        attributes(
            'Built-By': System.getProperty('user.name'),
            'Built-Date': new Date(),
            'Built-JDK': System.getProperty('java.version'),
            'Class-Path': configurations.runtimeClasspath.collect { it.getName() }.join(' '),
            'Main-Class': mainClassName
        )
    }
}

distributions {
    main {
        distributionBaseName = myAppName
    }
}

task createDistro(type: Copy) {
    def zipFile = file('build/distributions/'+myAppName+'.zip')
    def outputDir = file("build/install")

    from zipTree(zipFile)
    into outputDir
}
createDistro.dependsOn assembleDist
